unit Unit_Relatorio_Contas_Pagar;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, QRCtrls, QuickRpt, ExtCtrls, DB, IBCustomDataSet, IBQuery,
  StdCtrls, Mask, DBCtrls;

type
  TRel_Contas_Pagar = class(TForm)
    Relatorio: TQuickRep;
    QRBand1: TQRBand;
    QRBand2: TQRBand;
    QRSubDetail1: TQRSubDetail;
    QRBand3: TQRBand;
    QRLabel1: TQRLabel;
    QRLabel2: TQRLabel;
    QRSysData1: TQRSysData;
    QRSysData2: TQRSysData;
    QRLabel3: TQRLabel;
    QRLabel4: TQRLabel;
    QRLabel5: TQRLabel;
    QRLabel6: TQRLabel;
    QRLabel8: TQRLabel;
    Q_Rel: TIBQuery;
    Ds_Rel: TDataSource;
    QRDBText1: TQRDBText;
    QRDBText2: TQRDBText;
    QRDBText3: TQRDBText;
    QRDBText5: TQRDBText;
    QRLabel7: TQRLabel;
    QRDBText4: TQRDBText;
    Q_RelID_CONTA_PAGAR: TIntegerField;
    Q_RelVL_TOTAL_FATURA: TFloatField;
    Q_RelVL_TOTAL_PAGO: TFloatField;
    Q_RelHISTORICO: TIBStringField;
    Q_RelID_COMPRA: TIntegerField;
    Q_RelID_FORNECEDOR: TIntegerField;
    Q_RelNOME_FORNECEDOR: TIBStringField;
    procedure RelatorioBeforePrint(Sender: TCustomQuickRep;
      var PrintReport: Boolean);
    procedure RelatorioAfterPrint(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Rel_Contas_Pagar: TRel_Contas_Pagar;

implementation

uses Unit_Dm, Unit_Tela_Contas_Pagar;

{$R *.dfm}

procedure TRel_Contas_Pagar.RelatorioBeforePrint(Sender: TCustomQuickRep;
  var PrintReport: Boolean);
  var FILTRO : String;
begin
  FILTRO:= '';
  with Rel_Tela_Contas_Pagar do begin
    FILTRO:= ' select A.*, B.NOME_FORNECEDOR ' +
            ' from tab_conta_pagar A ' +
            ' inner join tab_fornecedor B on (A.id_fornecedor = B.id_fornecedor) ' +
            ' where vl_total_fatura > vl_total_pago ' ;

    //if (edt_dataini.Text <> '  /  /   ') and (edt_datafim.Text <> '  /  /   ')then
   // FILTRO := FILTRO + ' and a.dt_vencimento BETWEEN :p_datainicio AND :p_datafim ';

    if edt_fornecedor.KeyValue <> null then
      FILTRO := FILTRO + ' and a.id_fornecedor = :p_fornecedor ';

    Case  rg_ordena.ItemIndex of
      0 : FILTRO:= FILTRO + ' order by B.nome_fornecedor ';
      1 : FILTRO:= FILTRO +  ' order by A.vl_total_fatura ';
     // 2 : FILTRO:= FILTRO + ' order by A.dt_vencimento ';
    end;
    Q_Rel.Close;
    Q_Rel.sql.Clear;
    Q_Rel.sql.Add(FILTRO);

   { if (edt_dataini.Text <> '  /  /   ' ) and (edt_datafim.Text <> '  /  /   ' )then begin
      Q_Rel.ParamByName( 'p_datainicio' ).AsDate := edt_dataini.Date;
     Q_Rel.ParamByName( 'p_datafim' ).AsDate    := edt_datafim.Date;
    end; *}

    if edt_fornecedor.KeyValue <> null then
      Q_Rel.ParamByName( 'p_fornecedor' ).AsString := IntToStr(edt_fornecedor.KeyValue);

    Q_Rel.Prepare;
    Q_Rel.Open;
  end;

  Try
   Q_Rel.Open;
  Except
  Raise;
  end;
end;

procedure TRel_Contas_Pagar.RelatorioAfterPrint(Sender: TObject);
begin
  Try
   Q_Rel.Close;
  Except
  Raise;
  end;
end;

end.

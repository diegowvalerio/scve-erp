unit Unit_Backup;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, XPMan, StdCtrls, Buttons, IBServices, ExtCtrls, sGroupBox,
  sGauge;

type
  TForm_backup = class(TForm)
    OpenDialog1: TOpenDialog;
    IBBackupService1: TIBBackupService;
    IBConfigService1: TIBConfigService;
    SDArquBack: TSaveDialog;
    IBRestoreService1: TIBRestoreService;
    OpenDialog2: TOpenDialog;
    OpenDialog3: TOpenDialog;
    GroupBox1: TsGroupBox;
    Label2: TLabel;
    Edit1: TEdit;
    SpeedButton1: TSpeedButton;
    Label3: TLabel;
    Edit2: TEdit;
    SpeedButton2: TSpeedButton;
    BitBtn1: TBitBtn;
    Memo2: TMemo;
    GroupBox2: TsGroupBox;
    Label1: TLabel;
    SBLoca: TSpeedButton;
    EBase: TEdit;
    BCone: TBitBtn;
    BExecBack: TButton;
    Memo1: TMemo;
    procedure BExecBackClick(Sender: TObject);
    procedure BConeClick(Sender: TObject);
    procedure SBLocaClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure SpeedButton1Click(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure tRadioGroup1Click(Sender: TObject);
    procedure RadioGroup1Click(Sender: TObject);
    //procedure CarregaConfiguracao;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form_backup: TForm_backup;

implementation

uses Unit_Dm, UnitMenu, Unit_Login;

{$R *.dfm}

procedure TForm_backup.BExecBackClick(Sender: TObject);
begin
  try
    if not SDArquBack.Execute then//se o usuário não informar onde será salvo o arquivo de backup
      Exit;                       //cancela o procedimento
    Memo1.Clear;

    Memo1.Lines.Add('Preparando para gerar o backup...');
    Memo1.Lines.Add('');

    with IBBackupService1 do
    begin
      DM.Banco.Connected:=False;//desconecta da base de dados
      DatabaseName:=Form_backup.EBase.Text;//caminho da base de dados
      ServerName:='localhost';
      BackupFile.Clear;
      BackupFile.Add(SDArquBack.FileName);//adiciona o caminho do arquivo de backup escolhido pelo usuário
      //Protocol:=TCP;//protocolo de conexão
      Params.Clear;
      Params.Add('user_name=SYSDBA');//nome de usuário
      Params.Add('password=masterkey');//senha do usuário
      Options := [];
      Options := [NonTransportable, IgnoreLimbo];//limpa a propriedade option
      {o bloco de if abaixo esta adicionando as opções de restauração de acordo com o que o usuário escolheu.
      Após esta listagem você encontra um link para um outro artigo onde você encontra mais informações
      sobre essas e outras opções de restauração}


      {a propriedade verbose do TIBBackupService especifica
      se durante o processo de backup será retornado para a
      aplicação o detalhamento da execução}
      Verbose:= True;

      //Memo1.Lines.Add('  Ignorar checksum: '+BoolToStr(CBIgnoChec.Checked));
      //Memo1.Lines.Add('  Ignorar transações em limbo: '+BoolToStr(CBIgnoLimb.Checked));
     // Memo1.Lines.Add('  Coletar lixo: '+BoolToStr(CBRecoLixo.Checked));
      //Memo1.Lines.Add('  Formato transportável: '+BoolToStr(CBTran.Checked));
      //Memo1.Lines.Add('  Verbose: '+BoolToStr(CBTran.Checked));
      Memo1.Lines.Add('  Nome do servidor: '+ServerName);
      Memo1.Lines.Add('');
      Active:=True;//ativa o serviço de backup, mais ainda não inicia.
      Memo1.Lines.Add('');
      Memo1.Lines.Add('/***INICIO***\');
      Application.ProcessMessages;
      Memo1.Lines.Add('');
      try
        ServiceStart;//inicia o processo de backup
        while not Eof do
        begin
          {conforme o backup vai sendo executado o nos podemos pegar os detalhes da sua execução
          através da função GetNextLine}
          Memo1.Lines.Add(GetNextLine);
        end;
      finally
      end;
      Active:=False;//desativa o serviço de backup
      Memo1.Lines.Add('');
      Memo1.Lines.Add('/****FIM****\');
    end;
    Memo1.Lines.Add(''); Memo1.Lines.Add('');
    Memo1.Lines.Add('Backup concluído.');
    DM.Banco.Connected:=True;//conecta o sistema na base de dados

  except
    on E: Exception do
    begin
      Memo1.Lines.Add('Ocorreu um erro inesperado. O backup não foi concluído.');
      Memo1.Lines.Add('Informações da exceção:');
      Memo1.Lines.Add('  '+E.Message);
      DM.Banco.Connected:=True;//conecta o sistema na base de dados

    end;
  end;
end;







procedure TForm_backup.BConeClick(Sender: TObject);
procedure Status(Conectar: Boolean);
begin

  Label1.Enabled:=not Conectar;
  EBase.Enabled:=not Conectar;

  SBLoca.Enabled:=not Conectar;

  BExecBack.Enabled:=Conectar;
  if Conectar then
    BCone.Caption:='Desconectar'
  else
    BCone.Caption:='Conectar'
end;

begin
  if DM.Banco.Connected then
  begin
    DM.Banco.Connected:=False;
    Status(False);
    Exit;
  end;

  if EBase.Text='' then
  begin
    Application.MessageBox('Informe o caminho da base de dados.', 'Aviso', 48);
    EBase.SetFocus;
  end
  else
  begin
    with DM.Banco do
    begin
      DatabaseName:=EBase.Text;
      Connected:=True;
      if Connected then
        Status(True)
      else
        Application.MessageBox('Não foi possível cone ctar à base de dados.', 'Aviso', 48);
    end;
  end;
end;

procedure TForm_backup.SBLocaClick(Sender: TObject);
begin
if OpenDialog1.Execute then
    EBase.Text:=OpenDialog1.FileName;
end;

procedure TForm_backup.FormCreate(Sender: TObject);
begin
if Form_menu.bck= 1 then begin
 GroupBox1.Visible  := True;
 GroupBox2.Visible := False;
end;

if Form_menu.bck= 2 then begin
 GroupBox2.Visible  := True;
 GroupBox1.Visible := False;
end;

 EBase.Text:=' BANCO DE DADOS.FDB';
 Edit1.Text := ' BANCO DE DADOS.FBK';
 Edit2.Text := ' BANCO DE DADOS.FDB';
 SDArquBack.FileName := ' Backup  '+ FormatDateTime  ('dddd", "dd" de "mmmm" de "yyyy',now)+'.fbk';
 //DM.Banco.Connected := False;//desconecta da base de dados
      //DM.banco.Close;
      //dm.Free;
 end;






procedure TForm_backup.Button3Click(Sender: TObject);
begin
Close;
end;

procedure TForm_backup.BitBtn1Click(Sender: TObject);
begin
      Memo2.Lines.Add('Preparando para gerar o Restauração...');
      Memo2.Lines.Add('');



    with IBRestoreService1 do
    begin

    DM.banco.Connected:=False;
      DatabaseName.Add (Edit2.text);  ////caminho da base de dados
      LoginPrompt := False;
      Params.Clear;
      Params.Add('user_name=SYSDBA');//nome de usuário
      Params.Add('password=masterkey');//senha do usuário
      ServerName:='localhost';
      BackupFile.Clear;
      BackupFile.Add(Edit1.Text);//adiciona o caminho do arquivo de backup escolhido pelo usuário
      //Protocol:=TCP;//protocolo de conexão

       Options:= [];
      Options := [Replace, UseAllSpace];//limpa a propriedade option
      {o bloco de if abaixo esta adicionando as opções de restauração de acordo com o que o usuário escolheu.
      Após esta listagem você encontra um link para um outro artigo onde você encontra mais informações
      sobre essas e outras opções de restauração}



      PageSize := 2048;

      {a propriedade verbose do TIBBackupService especifica
      se durante o processo de backup será retornado para a
      aplicação o detalhamento da execução}
      Verbose:= True;

      Memo2.Lines.Add('  Nome do servidor: '+ServerName);
      Memo2.Lines.Add('');
      Active:=True;//ativa o serviço de backup, mais ainda não inicia.
      Memo2.Lines.Add('');
      Memo2.Lines.Add('/***INICIO***\');
      Application.ProcessMessages;
      Memo2.Lines.Add('');
      try
        ServiceStart;//inicia o processo de backup
        while not Eof do
        begin
          {conforme o backup vai sendo executado o nos podemos pegar os detalhes da sua execução
          através da função GetNextLine}
          Memo2.Lines.Add(GetNextLine);
      end;
      finally
      end;
      Active:=False;//desativa o serviço de backup
      Memo2.Lines.Add('');
      Memo2.Lines.Add('/****FIM****\');

    Memo2.Lines.Add(''); Memo2.Lines.Add('');
    Memo2.Lines.Add('Restauração concluída.');
    DM.banco.Open;
    DM.Banco.Connected:=True;//conecta o sistema na base de dados



    end;
 end;

procedure TForm_backup.SpeedButton1Click(Sender: TObject);
begin
OpenDialog2.Execute;
Edit1.Text := OpenDialog2.FileName;
  if OpenDialog2.FileName = ' ' then
    BitBtn1.Enabled := True;
end;

procedure TForm_backup.SpeedButton2Click(Sender: TObject);
begin
OpenDialog3.Execute;
Edit2.Text := OpenDialog3.FileName;
end;

procedure TForm_backup.tRadioGroup1Click(Sender: TObject);
begin
 // case  RadioGroup1.ItemIndex of
 // 0:   begin
      //  GroupBox2.Visible := True;
       // GroupBox1.Visible := False;
       // end;
 // 1:   begin
       // GroupBox2.Visible := False;
       // GroupBox1.Visible := True;

//end;
//end;
end;
procedure TForm_backup.RadioGroup1Click(Sender: TObject);
begin
  //case  RadioGroup1.ItemIndex of
  //0:   begin
        //GroupBox2.Visible := True;
       // GroupBox1.Visible := False;
     //   end;
 // 1:   begin
      //  GroupBox2.Visible := False;
       // GroupBox1.Visible := True;
//end;
//end;
end;
end.
